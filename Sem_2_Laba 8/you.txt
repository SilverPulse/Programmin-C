#include <check.h>  // Фреймворк для unit-тестированияч
#include <stdlib.h>  // Для EXIT_SUCCESS/EXIT_FAILURE
#include <limits.h>
#include "calculator.h" // Заголовочный файл с функциями для тестирования

// Тест 1: Проверка сложения
START_TEST(test_add) { // Начало тестового случая Макросы для объявления теста.
    ck_assert_int_eq(add(2, 3), 5); // это макрос, предоставляемый фреймворком Check для тестирования
    ck_assert_int_eq(add(-1, 1), 0);
}
END_TEST // Макросы для объявления теста.

// Тест 2: Проверка вычитания
START_TEST(test_subtract) {
    ck_assert_int_eq(subtract(5, 3), 2);
    ck_assert_int_eq(subtract(0, 0), 0);
}
END_TEST

// Создание тестового набора
Suite *calculator_suite(void) {  // Создание тестового набора
    Suite *s = suite_create("Calculator"); // Название набора (для вывода)
    TCase *tc_core = tcase_create("Core"); // Создание тестового случая (группы)

    tcase_add_test(tc_core, test_add); // Добавление тестов в группу
    tcase_add_test(tc_core, test_subtract);
    suite_add_tcase(s, tc_core); // Добавление группы в набор

    return s;
}

int main(void) {
    Suite *s = calculator_suite(); // Создание набора тестов
    SRunner *sr = srunner_create(s); // Создание "раннера" для выполнения тестов

    srunner_run_all(sr, CK_VERBOSE);
    int number_failed = srunner_ntests_failed(sr); // Получение количества упавших тестов
    srunner_free(sr); // Освобождение памяти

    return (number_failed == 0) ? EXIT_SUCCESS : EXIT_FAILURE; // Возврат статуса
}